const express = require('express');
const { Client } = require('pg');
const fs = require('fs'); 

const app = express();
app.use(express.json()); 

const client = new Client({
    user: 'postgres',
    host: 'localhost',
    database: 'usrecipies',
    password: 'root',
    port: 5432,
});

client.connect();

async function insertRecipesFromJson(filePath) {
    try {
        const jsonData = fs.readFileSync(filePath, 'utf8');
        const recipes = JSON.parse(jsonData);

        for (const key in recipes) {
            const recipe = recipes[key];
            const query = `
                INSERT INTO recipes (
                    continent, country_state, cuisine, title, url, rating,
                    total_time, prep_time, cook_time, description, ingredients,
                    instructions, nutrients, serves
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
                ) RETURNING id;
            `;
            const values = [recipe.Contient,recipe.Country_State,recipe.cuisine,recipe.title,recipe.URL,
                recipe.rating,recipe.total_time,recipe.prep_time,recipe.cook_time,recipe.description,
                JSON.stringify(recipe.ingredients), JSON.stringify(recipe.instructions), JSON.stringify(recipe.nutrients), 
                recipe.serves,
            ];
            const res = await client.query(query, values);
            console.log(`Inserted recipe with ID: ${res.rows[0].id}`);
        }
    } catch (err) {
        console.error('Error inserting data:', err);
    } 
}

//insertRecipesFromJson('./US_recipes_null.json');

 app.get('/api/users', async (req, res) => {
        try {
            const result = await client.query('SELECT * FROM recipes LIMIT 10'); 
            res.json(result.rows);
        } catch (err) {
            console.error('Error fetching users:', err);
            res.status(500).json({ error: 'Internal server error' });
        }
    });

app.get('/api/usersrating', async (req, res) => {
    try {
        const result = await client.query('SELECT * FROM recipes WHERE rating IS NOT NULL ORDER BY rating DESC LIMIT 10;'); 
        res.json(result.rows);
    } catch (err) {
        console.error('Error fetching users:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});





const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});